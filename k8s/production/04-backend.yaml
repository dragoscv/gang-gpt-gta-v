# Backend Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ganggpt-backend
  namespace: ganggpt-production
  labels:
    app: ganggpt-backend
    component: api
    environment: production
    version: v2.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: ganggpt-backend
      component: api
  template:
    metadata:
      labels:
        app: ganggpt-backend
        component: api
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ganggpt-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z ganggpt-postgres 5432; do
            echo "Waiting for PostgreSQL...";
            sleep 5;
          done;
          echo "PostgreSQL is ready!"
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z ganggpt-redis 6379; do
            echo "Waiting for Redis...";
            sleep 5;
          done;
          echo "Redis is ready!"
      - name: database-migration
        image: ganggpt/backend:latest
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ganggpt-config
        - secretRef:
            name: ganggpt-secrets
        command: ["pnpm", "prisma", "migrate", "deploy"]
        volumeMounts:
        - name: app-config
          mountPath: /app/config
          readOnly: true
      containers:
      - name: backend
        image: ganggpt/backend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3001
          name: http
          protocol: TCP
        - containerPort: 9464
          name: metrics
          protocol: TCP
        envFrom:
        - configMapRef:
            name: ganggpt-config
        - secretRef:
            name: ganggpt-secrets
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: app-config
          mountPath: /app/config
          readOnly: true
        - name: temp-storage
          mountPath: /tmp
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3001
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /api/ready
            port: 3001
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /api/health
            port: 3001
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      volumes:
      - name: app-config
        configMap:
          name: ganggpt-backend-config
      - name: temp-storage
        emptyDir:
          sizeLimit: 1Gi
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ganggpt-backend
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: ganggpt-backend
  namespace: ganggpt-production
  labels:
    app: ganggpt-backend
    component: api
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3001"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 3001
    targetPort: 3001
    protocol: TCP
    name: http
  - port: 9464
    targetPort: 9464
    protocol: TCP
    name: metrics
  selector:
    app: ganggpt-backend
    component: api
  sessionAffinity: None

---
# Backend Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ganggpt-backend
  namespace: ganggpt-production
  labels:
    app: ganggpt-backend
    component: api
automountServiceAccountToken: false

---
# Backend Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ganggpt-backend-hpa
  namespace: ganggpt-production
  labels:
    app: ganggpt-backend
    component: api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ganggpt-backend
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60

---
# Backend Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ganggpt-backend-pdb
  namespace: ganggpt-production
  labels:
    app: ganggpt-backend
    component: api
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: ganggpt-backend
      component: api

---
# Backend Application Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: ganggpt-backend-config
  namespace: ganggpt-production
  labels:
    app: ganggpt-backend
    component: api
data:
  # Application-specific configuration
  app.json: |
    {
      "name": "ganggpt-backend",
      "version": "2.0.0",
      "environment": "production",
      "features": {
        "ai_integration": true,
        "real_time_updates": true,
        "advanced_analytics": true,
        "social_features": true
      },
      "performance": {
        "max_concurrent_users": 10000,
        "ai_response_timeout": 30000,
        "database_connection_timeout": 30000,
        "cache_ttl": 300
      },
      "monitoring": {
        "metrics_enabled": true,
        "tracing_enabled": true,
        "logging_level": "info"
      }
    }
  
  # Logging configuration
  logging.json: |
    {
      "level": "info",
      "format": "json",
      "timestamp": true,
      "colorize": false,
      "transport": {
        "console": {
          "enabled": true,
          "level": "info"
        },
        "file": {
          "enabled": false
        },
        "elasticsearch": {
          "enabled": false
        }
      }
    }
