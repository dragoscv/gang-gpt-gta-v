generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(cuid())
  username     String            @unique
  email        String            @unique
  passwordHash String            @map("password_hash")
  lastLogin    DateTime?         @map("last_login")
  isActive     Boolean           @default(true) @map("is_active")
  isBanned     Boolean           @default(false) @map("is_banned")
  banReason    String?           @map("ban_reason")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  deletedAt    DateTime?         @map("deleted_at")
  role         String            @default("PLAYER") // UserRole enum as string
  characters   Character[]
  analytics    PlayerAnalytics[]
  sessions     UserSession[]
  passwordResetTokens PasswordResetToken[]
  profile      UserProfile?

  @@map("users")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  token        String
  refreshToken String?  @map("refresh_token")
  expiresAt    DateTime @map("expires_at")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Character {
  id                    String                       @id @default(cuid())
  userId                String                       @map("user_id")
  name                  String
  level                 Int                          @default(1)
  experience            Int                          @default(0)
  money                 Int                          @default(5000)
  bank                  Int                          @default(0)
  positionX             Float                        @default(0.0) @map("position_x")
  positionY             Float                        @default(0.0) @map("position_y")
  positionZ             Float                        @default(0.0) @map("position_z")
  dimension             Int                          @default(0)
  interior              Int                          @default(0)
  health                Int                          @default(100)
  armor                 Int                          @default(0)
  isOnline              Boolean                      @default(false) @map("is_online")
  playTime              Int                          @default(0) @map("play_time")
  lastSeen              DateTime?                    @map("last_seen")
  createdAt             DateTime                     @default(now()) @map("created_at")
  updatedAt             DateTime                     @updatedAt @map("updated_at")
  deletedAt             DateTime?                    @map("deleted_at")
  aiCompanions          AICompanion[]
  user                  User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  companionInteractions CompanionInteraction[]
  factionMembership     FactionMembership?
  assignedMissions      Mission[]                    @relation("AssignedMissions")
  missions              Mission[]
  npcInteractions       NPCInteraction[]
  npcMemories           NPCMemory[]
  narrativeInvolvement  PlayerNarrativeInvolvement[]

  @@map("characters")
}

model Faction {
  id                  String                   @id @default(cuid())
  name                String                   @unique
  description         String?
  type                String                   // FactionType enum as string
  influence           Int                      @default(10)
  territory           String?                  // Json as string
  color               String
  isActive            Boolean                  @default(true) @map("is_active")
  leaderId            String?                  @map("leader_id")
  aiPersonality       String?                  @map("ai_personality") // Json as string
  createdAt           DateTime                 @default(now()) @map("created_at")
  updatedAt           DateTime                 @updatedAt @map("updated_at")
  deletedAt           DateTime?                @map("deleted_at")
  events              FactionEvent[]
  influenceMatrix     FactionInfluenceMatrix[]
  members             FactionMembership[]
  relationships       FactionRelationship[]    @relation("FactionRelationships")
  targetRelationships FactionRelationship[]    @relation("TargetFactionRelationships")
  wars                FactionWar[]             @relation("FactionWars")
  targetWars          FactionWar[]             @relation("TargetFactionWars")
  npcs                NPC[]

  @@map("factions")
}

model FactionMembership {
  id          String      @id @default(cuid())
  characterId String      @unique @map("character_id")
  factionId   String      @map("faction_id")
  rank        String      @default("MEMBER") // FactionRank enum as string
  joinedAt    DateTime    @default(now()) @map("joined_at")
  isActive    Boolean     @default(true) @map("is_active")
  character   Character   @relation(fields: [characterId], references: [id], onDelete: Cascade)
  faction     Faction     @relation(fields: [factionId], references: [id], onDelete: Cascade)

  @@map("faction_memberships")
}

model FactionWar {
  id        String    @id @default(cuid())
  factionId String    @map("faction_id")
  targetId  String    @map("target_id")
  reason    String?
  status    String    @default("ACTIVE") // WarStatus enum as string
  startedAt DateTime  @default(now()) @map("started_at")
  endedAt   DateTime? @map("ended_at")
  winnerId  String?   @map("winner_id")
  faction   Faction   @relation("FactionWars", fields: [factionId], references: [id])
  target    Faction   @relation("TargetFactionWars", fields: [targetId], references: [id])

  @@map("faction_wars")
}

model FactionEvent {
  id          String    @id @default(cuid())
  factionId   String    @map("faction_id")
  type        String    // EventType enum as string
  description String
  data        String?   // Json as string
  createdAt   DateTime  @default(now()) @map("created_at")
  faction     Faction   @relation(fields: [factionId], references: [id], onDelete: Cascade)

  @@map("faction_events")
}

model NPC {
  id              String            @id @default(cuid())
  name            String
  type            String            // NPCType enum as string
  personality     String            // Json as string
  positionX       Float             @map("position_x")
  positionY       Float             @map("position_y")
  positionZ       Float             @map("position_z")
  isActive        Boolean           @default(true) @map("is_active")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  aggression      Float             @default(0.5)
  currentMood     String            @default("neutral") @map("current_mood")
  factionId       String?           @map("faction_id")
  intelligence    Float             @default(0.5)
  lastInteraction DateTime?         @map("last_interaction")
  loyalty         Float             @default(0.5)
  sociability     Float             @default(0.5)
  interactions    NPCInteraction[]
  memories        NPCMemory[]
  relationships   NPCRelationship[]
  faction         Faction?          @relation(fields: [factionId], references: [id])

  @@map("npcs")
}

model NPCInteraction {
  id          String    @id @default(cuid())
  characterId String    @map("character_id")
  npcId       String    @map("npc_id")
  type        String
  content     String
  response    String?
  sentiment   String?
  createdAt   DateTime  @default(now()) @map("created_at")
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  npc         NPC       @relation(fields: [npcId], references: [id], onDelete: Cascade)

  @@map("npc_interactions")
}

model Territory {
  id              String                   @id @default(cuid())
  name            String                   @unique
  description     String?
  boundaryData    String                   @map("boundary_data") // Json as string
  centerX         Float                    @map("center_x")
  centerY         Float                    @map("center_y")
  size            Float                    @default(1.0)
  economicValue   Float                    @default(1.0) @map("economic_value")
  strategicValue  Float                    @default(1.0) @map("strategic_value")
  population      Int                      @default(0)
  crimeLevel      Float                    @default(0.5) @map("crime_level")
  lawEnforcement  Float                    @default(0.5) @map("law_enforcement")
  isContested     Boolean                  @default(false) @map("is_contested")
  lastUpdated     DateTime                 @default(now()) @map("last_updated")
  createdAt       DateTime                 @default(now()) @map("created_at")
  updatedAt       DateTime                 @updatedAt @map("updated_at")
  influenceMatrix FactionInfluenceMatrix[]

  @@map("territories")
}

model Mission {
  id                String        @id @default(cuid())
  characterId       String        @map("character_id")
  type              String        // MissionType enum as string
  title             String
  description       String
  objectives        String        // Json as string
  rewards           String        // Json as string
  difficulty        Int           @default(1)
  status            String        @default("AVAILABLE") // MissionStatus enum as string
  progress          String?       // Json as string
  aiGenerated       Boolean       @default(false) @map("ai_generated")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  completedAt       DateTime?     @map("completed_at")
  assignedToId      String?       @map("assigned_to_id")
  estimatedDuration Int?          @map("estimated_duration")
  location          String?
  requirements      String?       // Json as string
  assignedTo        Character?    @relation("AssignedMissions", fields: [assignedToId], references: [id])
  character         Character     @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@map("missions")
}

model PlayerAnalytics {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  date              DateTime @default(now())
  playTimeMinutes   Int      @default(0) @map("play_time_minutes")
  actionsPerformed  Int      @default(0) @map("actions_performed")
  aiInteractions    Int      @default(0) @map("ai_interactions")
  missionsCompleted Int      @default(0) @map("missions_completed")
  moneyEarned       Int      @default(0) @map("money_earned")
  experienceGained  Int      @default(0) @map("experience_gained")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("player_analytics")
}

model NPCMemory {
  id               String              @id @default(cuid())
  npcId            String              @map("npc_id")
  playerId         String?             @map("player_id")
  memoryType       String              @map("memory_type") // MemoryType enum as string
  content          String
  emotionalContext String?             @map("emotional_context")
  importance       Int                 @default(5)
  decayFactor      Float               @default(1.0) @map("decay_factor")
  lastAccessed     DateTime            @default(now()) @map("last_accessed")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  associations     MemoryAssociation[]
  npc              NPC                 @relation(fields: [npcId], references: [id], onDelete: Cascade)
  player           Character?          @relation(fields: [playerId], references: [id])

  @@index([npcId, memoryType])
  @@index([playerId])
  @@index([importance])
  @@map("npc_memories")
}

model MemoryAssociation {
  id              String    @id @default(cuid())
  memoryId        String    @map("memory_id")
  relatedMemoryId String    @map("related_memory_id")
  associationType String    @map("association_type")
  strength        Float     @default(1.0)
  createdAt       DateTime  @default(now()) @map("created_at")
  memory          NPCMemory @relation(fields: [memoryId], references: [id], onDelete: Cascade)

  @@unique([memoryId, relatedMemoryId])
}

model NPCRelationship {
  id               String    @id @default(cuid())
  npcId            String    @map("npc_id")
  targetId         String    @map("target_id")
  targetType       String    @map("target_type")
  relationshipType String    @map("relationship_type")
  trust            Float     @default(0.0)
  respect          Float     @default(0.0)
  fear             Float     @default(0.0)
  loyalty          Float     @default(0.0)
  lastInteraction  DateTime? @map("last_interaction")
  interactionCount Int       @default(0) @map("interaction_count")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  npc              NPC       @relation(fields: [npcId], references: [id], onDelete: Cascade)

  @@unique([npcId, targetId, targetType])
  @@map("npc_relationships")
}

model AICompanion {
  id             String                 @id @default(cuid())
  name           String
  personality    String                 // Json as string
  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime               @updatedAt @map("updated_at")
  companionType  String                 @map("companion_type")
  customizations String?                // Json as string
  energy         Int                    @default(100)
  experience     Int                    @default(0)
  isActive       Boolean                @default(true) @map("is_active")
  level          Int                    @default(1)
  loyalty        Float                  @default(0.5)
  memory         String                 // Json as string
  mood           String                 @default("neutral")
  ownerId        String                 @map("owner_id")
  skills         String                 // Json as string
  owner          Character              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  interactions   CompanionInteraction[]
  progressions   CompanionProgression[]

  @@map("ai_companions")
}

model CompanionInteraction {
  id              String      @id @default(cuid())
  companionId     String      @map("companion_id")
  playerId        String      @map("player_id")
  interactionType String      @map("interaction_type")
  content         String
  response        String
  mood            String
  satisfaction    Float
  tokensUsed      Int         @default(0) @map("tokens_used")
  createdAt       DateTime    @default(now()) @map("created_at")
  companion       AICompanion @relation(fields: [companionId], references: [id], onDelete: Cascade)
  player          Character   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([companionId, createdAt])
  @@map("companion_interactions")
}

model CompanionProgression {
  id               String      @id @default(cuid())
  companionId      String      @map("companion_id")
  skillName        String      @map("skill_name")
  previousLevel    Int         @map("previous_level")
  newLevel         Int         @map("new_level")
  experienceGained Int         @map("experience_gained")
  trigger          String
  createdAt        DateTime    @default(now()) @map("created_at")
  companion        AICompanion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  @@map("companion_progressions")
}

model FactionRelationship {
  id               String    @id @default(cuid())
  factionId        String    @map("faction_id")
  targetFactionId  String    @map("target_faction_id")
  relationshipType String    @map("relationship_type")
  influence        Float     @default(0.0)
  trustLevel       Float     @default(0.0) @map("trust_level")
  tensionLevel     Float     @default(0.0) @map("tension_level")
  sharedTerritory  Int       @default(0) @map("shared_territory")
  economicTies     Float     @default(0.0) @map("economic_ties")
  militaryStrength Float     @default(0.5) @map("military_strength")
  lastInteraction  DateTime? @map("last_interaction")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  faction          Faction   @relation("FactionRelationships", fields: [factionId], references: [id], onDelete: Cascade)
  targetFaction    Faction   @relation("TargetFactionRelationships", fields: [targetFactionId], references: [id], onDelete: Cascade)

  @@unique([factionId, targetFactionId])
  @@map("faction_relationships")
}

model FactionInfluenceMatrix {
  id               String    @id @default(cuid())
  factionId        String    @map("faction_id")
  territoryId      String    @map("territory_id")
  influenceScore   Float     @map("influence_score")
  militaryPresence Float     @map("military_presence")
  economicControl  Float     @map("economic_control")
  popularSupport   Float     @map("popular_support")
  lastUpdated      DateTime  @default(now()) @map("last_updated")
  createdAt        DateTime  @default(now()) @map("created_at")
  faction          Faction   @relation(fields: [factionId], references: [id], onDelete: Cascade)
  territory        Territory @relation(fields: [territoryId], references: [id], onDelete: Cascade)

  @@unique([factionId, territoryId])
  @@map("faction_influence_matrix")
}

model NarrativeArc {
  id                String                       @id @default(cuid())
  title             String
  description       String
  arcType           String                       @map("arc_type")
  status            String                       @default("ACTIVE")
  priority          Int                          @default(5)
  globalImpact      Float                        @default(0.0) @map("global_impact")
  playerChoices     String                       @map("player_choices") // Json as string
  consequences      String                       // Json as string
  startedAt         DateTime                     @default(now()) @map("started_at")
  endedAt           DateTime?                    @map("ended_at")
  createdAt         DateTime                     @default(now()) @map("created_at")
  updatedAt         DateTime                     @updatedAt @map("updated_at")
  events            NarrativeEvent[]
  playerInvolvement PlayerNarrativeInvolvement[]

  @@map("narrative_arcs")
}

model NarrativeEvent {
  id             String       @id @default(cuid())
  narrativeArcId String       @map("narrative_arc_id")
  title          String
  description    String
  eventType      String       @map("event_type")
  location       String?
  triggeredBy    String?      @map("triggered_by")
  consequences   String       // Json as string
  isCompleted    Boolean      @default(false) @map("is_completed")
  createdAt      DateTime     @default(now()) @map("created_at")
  narrativeArc   NarrativeArc @relation(fields: [narrativeArcId], references: [id], onDelete: Cascade)

  @@map("narrative_events")
}

model PlayerNarrativeInvolvement {
  id               String       @id @default(cuid())
  playerId         String       @map("player_id")
  narrativeArcId   String       @map("narrative_arc_id")
  involvementLevel Float        @default(0.0) @map("involvement_level")
  choices          String       // Json as string
  reputation       Float        @default(0.0)
  rewards          String?      // Json as string
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  narrativeArc     NarrativeArc @relation(fields: [narrativeArcId], references: [id], onDelete: Cascade)
  player           Character    @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, narrativeArcId])
  @@map("player_narrative_involvement")
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  token     String    @unique
  expiresAt DateTime  @map("expires_at")
  used      Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model EconomicTransaction {
  id          String   @id @default(cuid())
  playerId    String   @map("player_id")
  amount      Float
  type        String   // INCOME, EXPENSE
  category    String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("economic_transactions")
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  money       Int      @default(5000)
  bank        Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model EconomicEvent {
  id          String   @id @default(cuid())
  eventType   String   @map("event_type")
  impactType  String   @map("impact_type")
  severity    Float
  description String
  duration    Int      @default(3600) // Duration in seconds, default 1 hour
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  expiresAt   DateTime @map("expires_at")

  @@map("economic_events")
}
