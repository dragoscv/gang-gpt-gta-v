version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: ganggpt-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-ganggpt}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-ganggpt_production}
      POSTGRES_INITDB_ARGS: '--encoding=UTF8 --locale=C'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - ganggpt-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-ganggpt} -d ${POSTGRES_DB:-ganggpt_production}']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: ganggpt-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - ganggpt-network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5

  # GangGPT Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: ganggpt-app-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-ganggpt}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-ganggpt_production}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
      AZURE_OPENAI_API_VERSION: ${AZURE_OPENAI_API_VERSION:-2024-02-01}
      AZURE_OPENAI_MODEL: ${AZURE_OPENAI_MODEL:-gpt-4o-mini}
      RAGE_MP_HOST: 0.0.0.0
      RAGE_MP_PORT: 22005
      API_PORT: 3001
      FRONTEND_PORT: 3000
      ENABLE_CORS: ${ENABLE_CORS:-false}
      CORS_ORIGINS: ${CORS_ORIGINS}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-1000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      FEATURE_FLAGS: ${FEATURE_FLAGS:-ai_companions:true,dynamic_missions:true,faction_wars:true}
    volumes:
      - logs_data:/app/logs
    ports:
      - '${API_PORT:-3001}:3001'    # Backend API
      - '${FRONTEND_PORT:-3000}:3000' # Frontend
      - '${RAGE_MP_PORT:-22005}:22005' # RAGE:MP
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ganggpt-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: ganggpt-nginx-prod
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    ports:
      - '${HTTP_PORT:-80}:80'
      - '${HTTPS_PORT:-443}:443'
    depends_on:
      - app
    networks:
      - ganggpt-network

  # Monitoring - Prometheus (Production)
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: ganggpt-prometheus-prod
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - '${PROMETHEUS_PORT:-9090}:9090'
    depends_on:
      - app
    networks:
      - ganggpt-network

  # Monitoring - Grafana (Production)
  grafana:
    image: grafana/grafana:10.3.3
    container_name: ganggpt-grafana-prod
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:${GRAFANA_PORT:-3005}
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    ports:
      - '${GRAFANA_PORT:-3005}:3000'
    depends_on:
      - prometheus
    networks:
      - ganggpt-network

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: ganggpt-node-exporter-prod
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - ganggpt-network

# Volumes
volumes:
  postgres_data:
  redis_data:
  logs_data:
  prometheus_data:
  grafana_data:

# Networks
networks:
  ganggpt-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
